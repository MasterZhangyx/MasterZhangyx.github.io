<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zyxdeblog</title>
    <link>https://MasterZhangyx.github.io/post/</link>
    <description>Recent content in Posts on zyxdeblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2019 22:29:15 +0800</lastBuildDate>
    
	<atom:link href="https://MasterZhangyx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RabbitMQ订阅模式</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 20 May 2019 22:29:15 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>RabbitMQ订阅模式 Publish/Subscribe模式  一个生产者，多个消费者。
 每一个消费者拥有自己的队列。
 生产者没有将消息放到队列，而是exchange。
 每个消费者的队列都要绑定到exchange上。
 生产者发送消息，经过exchange到达队列，实现订阅模式。
  图例：
生产者 package com.zyx.queue.ps; import java.io.IOException; import java.util.concurrent.TimeoutException; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.zyx.queue.RabbitMQUtils; public class Send { private static final String EXCHANGE_NAME = &amp;quot;test_exchange&amp;quot;; public static void main(String[] args) throws IOException, TimeoutException, InterruptedException { //1.获取连接 Connection connection = RabbitMQUtils.getConnection(); //2.创建频道 Channel channel = connection.createChannel(); //3.声明队列 channel.exchangeDeclare(EXCHANGE_NAME, &amp;quot;fanout&amp;quot;);//分发模式 //4.创建要发送的消息 String msg = new String(&amp;quot;hello rabbitmq&amp;quot;); //5.</description>
    </item>
    
    <item>
      <title>RabbitMQ 队列学习</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq-%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 20 May 2019 22:28:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq-%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0/</guid>
      <description>RabbitMQ 队列学习 准备工作 如果没有安装RabbitMQ，请参考我写的另一篇文章《RabbitMQ安装（mac版）》。安装完成后启动
rabbitmq-server  然后在浏览器输入http://localhost:15672/，输入guest/guest。点击Admin，添加一个用户，name=admin
password=123456，权限为admin，同时设置一个虚拟host为/test_host，
代码演示01（简单队列）  创建一个maven项目，修改pom文件如下  &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.zyx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;queue&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.rabbitmq&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;amqp-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.6.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/junit/junit --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/project&amp;gt;   创建一个rabbitmq连接，代码如下</description>
    </item>
    
    <item>
      <title>RabbitMQ应用场景</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Mon, 20 May 2019 22:13:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description> RabbitMQ应用场景  异步处理 应用解耦 流量削峰 日志处理 消息通讯  </description>
    </item>
    
    <item>
      <title>RabbitMQ事务处理</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 19 May 2019 17:35:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <description>RabbitMQ事务处理 问题 生产者发送消息到RabbitMQ服务器，怎么保证消息发送成功呢，使用两种方式实现
 事务机制 confirm机制  事务机制代码主要代码演示 生产者 package com.zyx.queue.tx; import java.io.IOException; import java.util.concurrent.TimeoutException; import com.rabbitmq.client.Channel; import com.rabbitmq.client.Connection; import com.zyx.queue.RabbitMQUtils; public class Producer { private static final String QUEUE_NAME = &amp;quot;test_queue_tx&amp;quot;; public static void main(String[] args) throws IOException, TimeoutException { //1.获取连接 Connection connection = RabbitMQUtils.getConnection(); //2.创建频道 Channel channel = connection.createChannel(); //3.声明队列 channel.queueDeclare(QUEUE_NAME, false, false, false, null); //4.创建要发送的消息 String msg = new String(&amp;quot;hello rabbitmq&amp;quot;); try { channel.txSelect();//开启事务 //5.发送消息 channel.basicPublish(&amp;quot;&amp;quot;, QUEUE_NAME, null, msg.</description>
    </item>
    
    <item>
      <title>RabbitMQ消息应答和消息持久化</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq%E6%B6%88%E6%81%AF%E5%BA%94%E7%AD%94%E5%92%8C%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 18 May 2019 17:12:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq%E6%B6%88%E6%81%AF%E5%BA%94%E7%AD%94%E5%92%8C%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description> RabbitMQ消息应答和消息持久化 消息应答 默认情况下，消费者接受到消息后，rabbitMq就删除内存中的消息。
可以修改为手动应答模式，等待消费者手动确认后再进行内存数据删除
boolean autoAck = false；//默认方式 autoAck = true; channel.basicConsume(QUEUE_NAME,autoAck,consumer);//设置手动提交模式 //同时在消息接收到之后进行标记修改 channel.basicAck(envelope.getDeliveryTag(), false);  消息持久化 指的是将队列的数据持久化到本地，用于防止数据丢失。
提示：已经初始化的队列不能修改参数后再次使用，只能删除再创建。
//3.声明队列 boolean durable = true; channel.queueDeclare(QUEUE_NAME, durable, false, false, null);  </description>
    </item>
    
    <item>
      <title>Linux常用命令总结</title>
      <link>https://MasterZhangyx.github.io/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 14 May 2019 23:49:26 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</guid>
      <description> sudo 使用root权限进行命令操作，例如:使用root用户编辑配置文件
sudo vim .bash_profile  echo 输出变量值，例如输出$PATH的值
echo $PATH  配置环境变量($PATH,export)  输入下面命令  sudo vim .bash_profile   输入e进入编辑页面
 输入i进行编辑
 在PATH变量后面配置xxx，其中如果没有$PATH，需要写成以下方式
  PATH=$PATH:XXX   如果存在$PATH，则进行追加即可，多个变量使用：分割。
 可以使用export 进行变量定义，例如
  export HOME=XXX/XXX PATH=$PATH:$HOME  </description>
    </item>
    
    <item>
      <title>RabbitMQ安装（mac版）</title>
      <link>https://MasterZhangyx.github.io/post/rabbitmq%E5%AE%89%E8%A3%85mac%E7%89%88/</link>
      <pubDate>Tue, 14 May 2019 23:47:43 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/rabbitmq%E5%AE%89%E8%A3%85mac%E7%89%88/</guid>
      <description>RabbitMQ安装（mac版） 安装步骤  安装前需要安装HomeBrew，不了解的可以先看我写的另外一篇文章《HomeBrew安装教程》
 先更新brew
  brew update   安装RabbitMQ  brew install rabbitmq   配置环境变量,将/usr/local/opt/rabbitmq/sbin加入$PATH中，具体做法参考《HomeBrew安装教程》
 启动服务
  rabbitmq-server   测试，浏览器输入下面地址，账号密码都是guest  http://localhost:15672/  参考文献 rabbit官网</description>
    </item>
    
    <item>
      <title>HomeBrew安装教程（mac版）</title>
      <link>https://MasterZhangyx.github.io/post/homebrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8Bmac%E7%89%88/</link>
      <pubDate>Tue, 14 May 2019 23:45:27 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/homebrew%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8Bmac%E7%89%88/</guid>
      <description>HomeBrew安装教程（mac版本） HomeBrew是什么 安装过程  Command+空格键打开聚焦搜索，输入ter，打开终端,输入下面命令  /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;   回车，根据提示输入账号密码，直到提示完成安装 输入brew &amp;ndash;version判断是否安装成功  安装小问题总结 如果输入brew &amp;ndash;version提示bash: brew: command not found ，尝试配置环境变量，需要在.bash_profile中配置一下path变量。在终端输入cd回到跟路径，输入 sudo vim .bash_profile指令编辑 .bash_profile文件，在文件中添加export PATH=/usr/local/bin:$PATH；如果PATH变量之前已经定义过，只需在后面追加 :/usr/local/bin(注：多个path变量之间通过&amp;rdquo; : &amp;ldquo;进行分隔)。输入完成之后执行source .bash_profile指令让bash_profile文件立即生效即可。
参考文档 HomeBrew官网</description>
    </item>
    
    <item>
      <title>零基础搭建一个个人博客系统(hugo)</title>
      <link>https://MasterZhangyx.github.io/post/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 12 May 2019 17:33:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</guid>
      <description>零基础搭建一个个人博客系统 安装brew brew 是 Mac 下的一个包管理工具，类似于 centos 下的 yum，可以很方便地进行安装/卸载/更新各种软件包，例如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，可以用来快速搭建各种本地环境，程序员必备工具
参考文档https://brew.sh/index_zh-cn.html
安装brew
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  安装hugo brew install hugo  测试是否安装成功 zyxdeMac-mini:~ zyx$ hugo version Hugo Static Site Generator v0.55.5/extended darwin/amd64 BuildDate: unknown  使用Hugo来创建项目(设置主站) 1. hugo new site zyxdeblog 2.zyxdeMac-mini:~ zyx$ cd zyxdeblog/ zyxdeMac-mini:zyxdeblog zyx$ ls -l total 8 drwxr-xr-x 3 zyx staff 96 5 12 14:50 archetypes -rw-r--r-- 1 zyx staff 82 5 12 14:50 config.</description>
    </item>
    
    <item>
      <title>生产力</title>
      <link>https://MasterZhangyx.github.io/post/%E7%94%9F%E4%BA%A7%E5%8A%9B/</link>
      <pubDate>Sun, 12 May 2019 16:12:04 +0800</pubDate>
      
      <guid>https://MasterZhangyx.github.io/post/%E7%94%9F%E4%BA%A7%E5%8A%9B/</guid>
      <description>第四篇 生产力 保持专注 克服将自己思维集中于单一任务的不适，只是暂时的，不会维持多久。
将一切干扰的事情处理好，然后进入专注模式。
制定年，季，月，周，日计划 使用印象笔记制定计划
使用番茄工作法进行任务分割和执行，能够准确看到自己使用可多少个番茄钟，从而明确知道自己每周的工作量。
番茄工作法的精髓在于能够让自己明确的知道自己每天投入的时间，从而获取成就感。
通过番茄钟来确定每周的工作量，而不是自己制定的目标数量，因为时间可以统计，而任务无法精确评估时间。
定额工作法进行任务制定  挑选一项重复性的任务 明确有限时间，以及被重复的次数 承诺一定要完成 根据情况进行调整，但是不能在有效时间内调整  对自己负责 制定计划和目标的最终原因就是对自己负责，在无人监督的情况下，完成自己制定的任务和计划。
要具有自我责任感。
对于多任务的选择 一般情况下进行多任务是很糟糕的，但是也有需要进行多任务的事情，例如集中打电话，看邮件等，需要根据实际情况进行分析和执行。
职业倦怠 职业倦怠就像运动员中的新秀墙，往往是自己的动机和兴趣减少，解决办法就是努力冲过那道墙，你会发现海阔天空。
关于时间浪费问题 生活中时间不够用，往往是因为被无形中浪费了，例如看电视，玩手机，可以通过分析和统计一下自己的时间，看看都浪费到哪里去了。
养成惯例的好处 养成好的惯例能让你每天都知道自己做什么，同时你会审视自己所做的是不是正在目标的路上进行前进，从而让目标更近一步。
现在马上创建属于自己的惯例。然后细化他到每一天。
培养习惯 习惯主要有三个要素构成，暗示，惯例，奖励。找到自己习惯的三要素，然后分析其中不好的习惯。怎么去除里面的暗示，然后培养好的习惯，找到让你做起来的暗示。
分解任务 大的任务往往让人感觉紧张和焦虑。所以需要进行分解，分解的过程中也会对任务有更新的认识。
努力工作 成功的方式就是努力的工作，没有其他捷径。
我们必须学会脚踏实地，埋头苦干，这里没有简单的答案。
当你在逃避工作的时候，其实明白这件事必须要做，所以不如现在就去做，而不是拖到最后，必须明白一点，要想实现目标，就是硬着头皮，开始工作。</description>
    </item>
    
  </channel>
</rss>